import pandas as pd
import pandasql as ps
# pip install -U pandasql


def create_dataframe_from_csv(csv_file):
    with open(csv_file, 'r') as cfile:
        df = pd.read_csv(cfile)
        cfile.close()
    return df




def city_data_summary(csv_file, city_name):

    df = create_dataframe_from_csv(csv_file)

    
    sql_query1 = '''
                    WITH clean_raw_data as
                        (
                            SELECT id as Unit_id,
                                   (CASE 
                                            WHEN room_type IN ('Entire home/apt', 
                                                                'Hotel room') THEN 'Entire Unit'
                                                                
                                            WHEN room_type IN ('Private room', 
                                                                'Shared room') THEN 'Room'
                                            ELSE 'None'
                                            END) AS unit_type,
                                                               
                                    (CASE 
                                            WHEN bathrooms_text in ('0 shared baths', 
                                                                    '0 baths') THEN '0'
                                                                    
                                            WHEN bathrooms_text in ('1 shared bath', 
                                                                    'Shared half-bath', 
                                                                    'Half-bath', 
                                                                    'Private half-bath', 
                                                                    '1.5 shared baths', 
                                                                    '2 shared baths', 
                                                                    '2.5 shared baths', 
                                                                    '3 shared baths', 
                                                                    '3.5 shared baths', 
                                                                    '4 shared baths', 
                                                                    '4.5 shared baths', 
                                                                    '5 shared baths', 
                                                                    '8 shared baths') THEN '0.5' 
                                                                    
                                            WHEN bathrooms_text in ('1 bath', 
                                                                    '1 private bath') THEN '1' 
                                                                    
                                            WHEN bathrooms_text = '1.5 baths' THEN '1.5' 
                                            
                                            WHEN bathrooms_text = '2 baths' THEN '2' 
                                            
                                            WHEN bathrooms_text in ('2.5 baths', 
                                                                    '3 baths', 
                                                                    '3.5 baths', 
                                                                    '4 baths', 
                                                                    '4.5 baths', 
                                                                    '5 baths', 
                                                                    '5.5 baths', 
                                                                    '6 baths', 
                                                                    '6.5 baths', 
                                                                    '7 baths', 
                                                                    '7.5 baths', 
                                                                    '8 baths', 
                                                                    '9 baths') THEN '2+' 
                                            ELSE 'None'  
                                            END) AS baths, 
                                            
                                       beds as bedrooms,
                                       
                                       CAST(price as INT) as Price,
                                       
                                       ROUND((90 - availability_90)/3, 1) AS days_rented_per_month,
                                       
                                       review_scores_rating as average_reviews
                                       
                                       FROM df
                             )
                    SELECT bedrooms, 
                           baths,
                           unit_type,
                           ROUND(AVG(average_reviews),2) AS average_reviews,
                           ROUND(AVG(days_rented_per_month),2) AS average_days_rented_per_month,
                           ROUND(AVG(price),2) AS average_price_per_day
                    
                    FROM clean_raw_data
                    GROUP BY bedrooms, baths, unit_type
                                                        '''
#NULL values from AVG(average_reviews) AS average_reviews, are excluded by default

    new_df = ps.sqldf(sql_query1)
        
    sql_query2 = '''
                    SELECT bedrooms,
                           baths,
                           unit_type,
                           average_reviews,
                           average_days_rented_per_month,
                           average_price_per_day
                    FROM new_df
                    WHERE bedrooms IN ('1', '2') AND baths IN ('1', '2') AND unit_type = 'Entire Unit'
    
                                '''
    new_new_df = ps.sqldf(sql_query2)
    new_new_df['City'] = city_name

    
    return new_new_df




def export_df_to_csv(df, file_name):
    df.to_csv(file_name, encoding='utf-8', index=False)
    
# export_df_to_csv(city_data_summary('listings_toronto.csv', "Toronto"), "test4.csv")
    
    
def main():
    
    montreal_data = city_data_summary('listings_montreal.csv', "Montreal")
    toronto_data = city_data_summary('listings_toronto.csv', "Toronto")
    vancouver_data = city_data_summary('listings_vancouver.csv', "Vancouver")
    victoria_data = city_data_summary('listings_victoria.csv', "Victoria")
    winnipeg_data = city_data_summary('listings_winnipeg.csv', "Winnipeg")
    
    sql_query1 = '''
                    WITH all_cities_data as (
                                                SELECT City,
                                                       bedrooms,
                                                       baths,
                                                       unit_type,
                                                       average_reviews,
                                                       average_days_rented_per_month,
                                                       average_price_per_day
                                                FROM montreal_data

                                                UNION ALL

                                                SELECT City,
                                                       bedrooms,
                                                       baths,
                                                       unit_type,
                                                       average_reviews,
                                                       average_days_rented_per_month,
                                                       average_price_per_day
                                                FROM toronto_data

                                                 UNION ALL

                                                SELECT City,
                                                       bedrooms,
                                                       baths,
                                                       unit_type,
                                                       average_reviews,
                                                       average_days_rented_per_month,
                                                       average_price_per_day
                                                FROM vancouver_data

                                                UNION ALL

                                                SELECT City,
                                                       bedrooms,
                                                       baths,
                                                       unit_type,
                                                       average_reviews,
                                                       average_days_rented_per_month,
                                                       average_price_per_day
                                                FROM victoria_data

                                                UNION ALL

                                                SELECT City,
                                                       bedrooms,
                                                       baths,
                                                       unit_type,
                                                       average_reviews,
                                                       average_days_rented_per_month,
                                                       average_price_per_day
                                                FROM winnipeg_data

                                                ORDER BY City
                                                    )
                                                    
                        SELECT City, 
                               unit_type, 
                               CAST(bedrooms AS INT) AS bedrooms, 
                               baths, 
                               average_price_per_day, 
                               average_days_rented_per_month, 
                               
                               ROUND(
                                   CAST(average_price_per_day AS DECIMAL(7,2)) * 
                                   CAST(average_days_rented_per_month AS DECIMAL(7,2)), 
                                       0) AS monthly_gross_revenue,
                                       
                               average_reviews
                        
                        FROM all_cities_data
                        
                        ORDER BY City

                                                                        '''
    
    revenue_summary = ps.sqldf(sql_query1)
    
    revenue_summary['key'] = revenue_summary['City'] + "-" \
                           + revenue_summary['unit_type'] + "-" \
                           + revenue_summary['bedrooms'].astype(str) + "-" \
                           + revenue_summary['baths'].astype(str)
    
    
    expenses_csv = create_dataframe_from_csv('Expenses.csv')
    
    
    
    expenses_csv['total_monthly_expenses'] = expenses_csv['Monthly Rent']\
                                           + expenses_csv['Cleaning']\
                                           + expenses_csv['Hydro']\
                                           + expenses_csv['Internet']\
                                           + expenses_csv['Snacks']\
        
    expenses_csv['key'] = expenses_csv['City'] + "-" \
                        + expenses_csv['unit_type'] + "-" \
                        + expenses_csv['bedrooms'].astype(str) + "-" \
                        + expenses_csv['baths'].astype(str)  
    
        
    sql_query2 = '''
    
            WITH profit_table AS 
                  (
                    SELECT r.City, 
                            r.unit_type, 
                            r.bedrooms, 
                            r.baths, 
                            r.average_reviews,
                            r.monthly_gross_revenue,
                            e.total_monthly_expenses,
                            e.'Monthly Rent',
                            (r.monthly_gross_revenue - e.total_monthly_expenses) AS net_monthly_revenue,
                            (r.monthly_gross_revenue - e.total_monthly_expenses)*12 AS net_annual_revenue,
                            (r.monthly_gross_revenue - e.total_monthly_expenses - 0.1 * e.'Monthly Rent') 
                                        AS net_monthly_revenue_with_rent_increase,
                            (r.monthly_gross_revenue - e.total_monthly_expenses - 0.1 * e.'Monthly Rent')*12 
                                        AS net_annual_revenue_with_rent_increase
                                                               

                        FROM revenue_summary AS r
    
                        LEFT JOIN expenses_csv e ON r.key=e.key
                                                                )
                
            
            SELECT City,
                   unit_type,
                   bedrooms,
                   baths,
                   average_reviews,
                   net_monthly_revenue,
                   net_annual_revenue,
                   ROUND(100000/net_annual_revenue,1) AS units_for_six_figures,
                   net_monthly_revenue_with_rent_increase,
                   net_annual_revenue_with_rent_increase,
                   ROUND(100000/net_annual_revenue_with_rent_increase,1) 
                           AS units_for_six_figures_if_rent_increases
                   
                   
                 
            FROM profit_table 
            
            WHERE net_monthly_revenue > 0
            
            ORDER BY units_for_six_figures ASC
                   
                                                                          '''
    
    
    tables_merged = ps.sqldf(sql_query2)
    
    
    export_df_to_csv(tables_merged, "test5.csv")
    
    
main()
